# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  pull_request: # Triggers the workflow on push or pull request events
  issue_comment:
    type: [created]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build: # This workflow contains a single job called "build"
    # The type of runner that the job will run on
    if: github.event_name == 'pull_request' || (contains(github.event.comment.html_url, '/pull/') && contains(github.event.comment.body, 'run workflow'))
    runs-on: ubuntu-latest
    steps: # Steps represent a sequence of tasks that will be executed as part of the job
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get branch of PR
        uses: xt0rted/pull-request-comment-branch@v2
        id: comment-branch

      - name: Set latest commit status as pending
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending

      - name: Checkout PR branch ${{ steps.comment-branch.outputs.head_ref }}
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20

      # Do the actual deployment (exit randomly with 0 or 1)
      - name: Deploy
        run: |
          echo "Deploying..."
          exit $(($RANDOM%2))
      - name: Add workflow result as comment on PR
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const name = '${{ github.workflow	}}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const success = '${{ job.status }}' === 'success';
            const body = `${name}: ${success ? 'succeeded ✅' : 'failed ❌'}\n${url}`;
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
          
      # Runs a single command using the runners shell
      - name: output file
        run: cat test.txt

      - name: Print sha and ref
        run: | 
          echo $GITHUB_SHA
          echo $GITHUB_REF
